#!/usr/bin/env bash

# https://github.com/knatsakis/rofi-buku

_rofi () {
    rofi -dmenu -i -no-levenshtein-sort -width 1000 "$@"
}

# display settings
display_type=1
max_str_width=80

# keybindings
switch_view="Alt+Tab"
new_bookmark="Alt+n"
actions="Alt+a"
edit="Alt+e"
delete="Alt+d"

# colors
help_color="#334433"

# source global config
if [[ -f /etc/rofi-buku.config ]]
then
  source /etc/rofi-buku.config
fi

# source local config:
if [[ -z $XDG_CONFIG_DIR ]]
then
  if [[ -f $HOME/.config/rofi-buku/config ]]
  then
    source $HOME/.config/rofi-buku/config
  else
    echo "User config file '~/.config/rofi-buku/config' not found. using global config"
  fi
else
  if [[ -f "${XDG_CONFIG_DIR}/rofi-buku/config" ]]
  then
    source "${XDG_CONFIG_DIR}/rofi-buku/config"
  else
    echo "User config file '~/.config/rofi-buku/config' not found. using global config"
  fi
fi


main () {
    HELP="Welcome to Buku. Use <span color='${help_color}'>${new_bookmark}</span> to add a new Bookmark
Use <span color='${help_color}'>${switch_view}</span> to switch View. <span color='${help_color}'>${actions}</span> for actions"
    if [[ $mode == "bookmarks" ]]; then
        content=$(parseBuku)
        menu=$(echo "${content}" | _rofi -p '> ' -filter "${filter}" -mesg "${HELP}" -kb-custom-1 "${new_bookmark}" -kb-custom-2 "${switch_view}" -kb-custom-3 "${actions}" -kb-custom-4 "${edit}" -kb-custom-5 "${delete}")
    elif [[ $mode == "tags" ]]; then
        menu=$(buku --nostdin --np --st | grep -v -e '^waiting for input$' -e '^$' | awk '{$NF=""; print $0}' | cut -d ' ' -f2  | _rofi -p '> ' -mesg "${HELP}" -kb-custom-1 "${new_bookmark}" -kb-custom-2 "${switch_view}" -kb-custom-3 "${actions}" -kb-custom-4 "${edit}" -kb-custom-5 "${delete}")
    fi
    val=$?
    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 12 ]]; then
        optionsMenu
    elif [[ $val -eq 10 ]]; then
        addMark
    elif [[ $val -eq 14 ]]; then
        deleteMenu
    elif [[ $val -eq 13 ]]; then
        editMenu
    elif [[ $val -eq 11 ]]; then
        if [[ $mode == "bookmarks" ]]; then
            export mode="tags"
            mode=tags main
        elif [[ $mode == "tags" ]]; then
            export mode="bookmarks"
            mode=bookmarks main
        fi
    elif [[ $val -eq 0 ]]; then
        if [[ $mode == "bookmarks" ]]; then
            id=$(getId "$content" "$menu")
            for bm in ${id}; do
                buku --nostdin -o "${bm}"
            done
        elif [[ $mode == "tags" ]]; then
            filter="${menu}" mode="bookmarks" main
        fi
    fi
}

optionsMenu () {
  if [[ $mode == "bookmarks" ]]; then
    askmenu=$(echo -e "< Return\\n---\\n1. Edit\\n2. Delete" | _rofi -p '> ' -mesg "Choose Action for bookmark")
    val=$?

    if [[ $val -eq 1 ]]; then
      exit
    elif [[ $val -eq 0 ]]; then
      if [[ $askmenu == "< Return" ]]; then
        export mode=bookmarks
        main
      elif [[ $askmenu == "1. Edit" ]]; then
        editMenu
      elif [[ $askmenu == "2. Delete" ]]; then
        deleteMenu
      fi
    fi
  elif [[ $mode == "tags" ]]; then
    askmenu=$(echo -e "< Return\\n---\\n1. Replace Tag\\n2. Delete Tag" | _rofi -p '> ' -mesg "Choose Action for tag \"${menu}\"")
    val=$?

    if [[ $val -eq 1 ]]; then
      exit
    elif [[ $val -eq 0 ]]; then
      if [[ $askmenu == "< Return" ]]; then
        export mode=tags
        main
      elif [[ $askmenu == "1. Replace Tag" ]]; then
        newtag=$(echo | _rofi -p '> ' -mesg "Enter new tag name for tag \"${menu}\"")
        val=$?

        if [[ $val -eq 1 ]]; then
          exit
        elif [[ $val -eq 0 ]]; then
          if [[ $newtag == "" ]]; then
            mode=tags main
          else
            buku --nostdin --replace "${menu}" "${newtag}"
            mode=tags main
          fi
        fi
      elif [[ $askmenu == "2. Delete Tag" ]]; then
        delask=$(echo -e "1. Yes\\n2. No" | _rofi -p '> ' -mesg "Really delete tag \"${menu}\" from ALL bookmarks?")
        val=$?

        if [[ $val -eq 1 ]]; then
          exit
        elif [[ $val -eq 0 ]]; then
          if [[ $delask == "1. Yes" ]]; then
	    echo y | script -qfc "buku --nostdin --replace ${menu}" /dev/null
            mode=tags main
          elif [[ $delask == "2. No" ]]; then
            mode=tags main
          fi
        fi
      fi
    fi
  fi
}

deleteMenu () {
  id=$(getId "$content" "$menu")

  delask=$(echo -e "1. Yes\\n2. No" | _rofi -p '> ' -mesg "Really delete bookmark?")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    if [[ $delask == "1. Yes" ]]; then
      buku --nostdin -d "${id}" --tacit
      mode=bookmarks main
    elif [[ $delask == "2. No" ]]; then
      optionsMenu
    fi
  fi
}

editMenu () {
    id=$(getId "$content" "$menu")

    title="$(getTitleFromId "${id}")"
    url="$(getUrlFromId "${id}")"
    comment="$(getCommentFromId "${id}")"
    tags="$(getTagsFromId "${id}")"

    content="1. Title: $title\\n2. URL: $url\\n3. Comment: $comment\\n4. Tags: $tags"
    editmenu=$(echo -e "< Return\\n---\\n${content}" | _rofi -p '> ')
    val=$?

    if [[ $val -eq 1 ]]; then
        exit
    elif [[ $val -eq 0 ]]; then
        if [[ $editmenu == "< Return" ]]; then
            main
        elif [[ $editmenu =~ Title:* ]]; then
            editTitle
        elif [[ $editmenu =~ URL:* ]]; then
            editUrl
        elif [[ $editmenu =~ Comment:* ]]; then
            editComment
        elif [[ $editmenu =~ Tags:* ]]; then
            editTags
        fi
    fi
}

editTitle () {
  titlemenu=$(echo "" | _rofi -p "> " -filter "${title}" -mesg "Edit Title and hit Enter")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    buku --nostdin -u "${id}" --title "${titlemenu}"
  fi

  mode=bookmarks main
}

editUrl () {
  urlmenu=$(echo "" | _rofi -p "> " -filter "${url}" -mesg "Edit URL and hit Enter")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    if [[ $urlmenu != "http"* ]]; then
      echo "" | rofi -e "Not a valid URI, Make sure URLs start with http"
      editUrl
    else
      buku --nostdin -u "${id}" --url "${urlmenu}"
    fi
  fi

  mode=bookmarks main
}

editComment () {
  commentmenu=$(echo "" | _rofi -p "> " -filter "${comment}" -mesg "Edit Comment and hit Enter")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    buku --nostdin -u "${id}" --comment "${commentmenu}"
  fi

  mode=bookmarks main
}

editTags () {
  edittagsmenu=$(echo | _rofi -filter "${tags}" -p '> ' -mesg "Edit Tags and hit Enter")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    buku --nostdin -u "${id}" --tag "${edittagsmenu}"
  fi

  mode=bookmarks main
}

addMark () {
  inserturl=$(echo -e "$(xclip -o)" | _rofi -p '> ' -mesg "Use URL below or type manually")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    addTags
  fi
}

addTags () {
  inserttags=$(buku --nostdin --np --st | grep -v '^waiting for input$' | awk '{$NF=""; print $0}' | cut -d ' ' -f2- | _rofi -p '> ' -mesg "Add some tags. Separate tags with ', '")
  val=$?

  if [[ $val -eq 1 ]]; then
    exit
  elif [[ $val -eq 0 ]]; then
    if [[ $(echo "${inserttags}" | wc -l) -gt 1 ]]; then
      taglist=$(echo "${inserttags}" | tr '\n' ',')
      tags=()
      for tag in $taglist; do
        tags+=("$tag")
      done
    else
      tags=${inserttags}
    fi

    buku --nostdin -a "${inserturl}" "${tags}"
  fi
}

parseBuku () {
  buku --nostdin --nc -p | grep -v '^waiting for input$' | gawk -v max="$max_str_width" -v type="$display_type" '
    BEGIN { RS=""; FS="\n" }
    {
      id = gensub(/([0-9]+)\.(.*)/, "\\1", "g", $1)

      title = substr(gensub(/[0-9]+\.\s*(.*)/, "\\1", "g", $1),0,max)
      url = substr(gensub(/\s+> (.*)/, "\\1", "g", $2),0,max)

      if ($3 ~ /^\s+\+ /)
        comment = gensub(/\s+\+ (.*)/, "\\1", "g", $3)
      else
        comment = ""

      if ($3 ~ /^\s+# /)
        tags = gensub(/\s+# (.*)/, "\\1", "g", $3)
      else
        if ($4 ~ /^\s+# /)
          tags = gensub(/\s+# (.*)/, "\\1", "g", $4)
        else
          tags = "NOTAG"

      if (type == 1)
        print id "\t" url "\t" tags
      if (type == 2)
        print id "\t" title "\t" tags
      if (type == 3)
        print id " \t" title "\t" url "\t" tags

      print ""
    }
  ' | column -t -s $'\t'
}

getId () {
  id="${2%% *}"
  if [ -z "$id" ]; then
    prev=""
    IFS=$'\n'
    for line in $1; do
      if [ "$2" = "$line" ]; then
        id="${prev%% *}"
        break
      else
        prev="$line"
      fi
    done
  fi
  echo $id
}

getTitleFromId () {
  buku --nostdin --nc -p "${1}" | grep -v '^waiting for input$' | gawk '
    BEGIN { RS=""; FS="\n" }

    { print gensub(/[0-9]+\.\s*(.*)/, "\\1", "g", $1) }
  '
}

getUrlFromId () {
  buku --nostdin --nc -p "${1}" | grep -v '^waiting for input$' | gawk '
    BEGIN { RS=""; FS="\n" }

    { print gensub(/\s+> (.*)/, "\\1", "g", $2) }
  '
}

getCommentFromId () {
  buku --nostdin --nc -p "${1}" | grep -v '^waiting for input$' | gawk '
    BEGIN { RS=""; FS="\n" }

    {
      if ($3 ~ /^\s+\+ /)
        print gensub(/\s+\+ (.*)/, "\\1", "g", $3)
    }
  '
}

getTagsFromId () {
  buku --nostdin --nc -p "${1}" | grep -v '^waiting for input$' | gawk '
    BEGIN { RS=""; FS="\n" }

    {
      if ($3 ~ /^\s+# /)
        print gensub(/\s+# (.*)/, "\\1", "g", $3)

      if ($4 ~ /^\s+# /)
        print gensub(/\s+# (.*)/, "\\1", "g", $4)
    }
  '
}

mode=bookmarks main
